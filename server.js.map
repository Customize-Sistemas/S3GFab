{"version":3,"sources":["../src/server.ts","../src/routes/index.ts","../src/routes/session.routes.ts","../src/database/connection.ts","../src/models/Signin.ts","../src/controllers/SessionController.ts","../src/config/auth.ts","../src/errors/AppError.ts","../src/routes/view.routes.ts","../src/middlewares/ValidadeToken.ts","../src/routes/load.routes.ts","../src/models/DataLoading.ts","../src/controllers/DataLoadingController.ts","../src/routes/production.routes.ts","../src/database/sqlite3.connection.ts","../src/models/Production.ts","../src/controllers/ProdutionController.ts","../src/routes/finances.routes.ts","../src/models/Finances.ts","../src/controllers/FinancesController.ts"],"sourcesContent":["import express, { NextFunction, Request, Response } from 'express';\nimport 'express-async-errors';\nimport CookieParser from 'cookie-parser';\nimport cors from 'cors';\n// import https from 'https';\n// import http from 'http';\n// import fs from 'fs';\nimport Routes from './routes';\nimport AppError from './errors/AppError';\n\nconst app = express();\n\n// const key = fs.readFileSync('./src/CA/localhost/localhost.decrypted.key');\n// const cert = fs.readFileSync('./src/CA/localhost/localhost.crt');\n\napp.enable('trust proxy');\napp.set('view engine', 'ejs');\napp.set('views', './views/');\n\napp.use(cors());\napp.use(CookieParser());\napp.use(express.json());\n\napp.use('/', Routes);\napp.use(express.static('./public/'));\n\napp.use((err: Error, req: Request, res: Response, _: NextFunction) => {\n  if (err instanceof AppError) {\n    return res.status(err.statusCode).json({\n      status: 'Error',\n      message: err.message,\n    });\n  }\n\n  // eslint-disable-next-line no-console\n  console.error(err);\n\n  return res.status(500).json({\n    status: 'Error',\n    message: 'Internal Server Error',\n  });\n});\n\napp.listen(3333, () => {\n  console.log(`ðŸš€ Server Started at http://localhost:3333`);\n});\n\n// https.createServer({ key, cert }, app).listen(3334);\n// http\n//   .createServer((req, res) => {\n//     const portHttps = `${String(req.headers.host).split(':')[0]}:3334`;\n\n//     res.writeHead(301, { Location: `https://${portHttps}${req.url}` });\n//     res.end();\n//   })\n//   .listen(3333, () => {\n//     console.log(`ðŸš€ Server Started at port ${3334}`);\n//   });\n","import { Router } from 'express';\r\nimport Sessions from './session.routes';\r\nimport View from './view.routes';\r\nimport Load from './load.routes';\r\nimport Production from './production.routes';\r\nimport Finances from './finances.routes';\r\n\r\nconst routes = Router();\r\n\r\nroutes.use('/api/sessions', Sessions);\r\nroutes.use('/api/loads', Load);\r\nroutes.use('/api/production', Production);\r\nroutes.use('/api/finances', Finances);\r\nroutes.use('/', View);\r\n\r\nexport default routes;\r\n","import { Router } from 'express';\r\nimport SessionController from '@controllers/SessionController';\r\nimport { UserParameters } from '../types';\r\n\r\nconst sessionRoutes = Router();\r\nconst sessionController = new SessionController();\r\n\r\nsessionRoutes.post('/', async (request, response) => {\r\n  const params: UserParameters = request.body;\r\n\r\n  const { token, user } = await sessionController.logon(params);\r\n\r\n  response.cookie('token', token, {\r\n    expires: new Date(new Date().setDate(new Date().getDate() + 1)),\r\n    // secure: true,\r\n    // sameSite: 'none',\r\n  });\r\n  response.json({ token, user });\r\n});\r\n\r\nsessionRoutes.get('/logout', (request, response) => {\r\n  response.clearCookie('token');\r\n  response.redirect('/');\r\n});\r\n\r\nexport default sessionRoutes;\r\n","import oracledb from 'oracledb';\n\noracledb.initOracleClient({\n  libDir: 'C:\\\\Oracle',\n});\n\nconst connection = async (): Promise<oracledb.Connection> => {\n  oracledb.outFormat = oracledb.OUT_FORMAT_OBJECT;\n\n  return oracledb.getConnection({\n    user: 'SINDU',\n    password: 'RELAT',\n    // connectionString: '26.207.125.27/RENATO',\n    // connectString: 'localhost/XE',\n    connectString: '26.95.44.106/XE',\n  });\n};\n\nexport default connection;\n","import { UserParameters } from '../types';\r\nimport connection from '../database/connection';\r\n\r\nexport default class Signin {\r\n  public async create({ user, pass }: UserParameters): Promise<{}> {\r\n    const conn = await connection();\r\n\r\n    const query = `\r\n        SELECT\r\n          C.SET_DESC SETOR,\r\n          C.SET_COD COD_SETOR,\r\n          B.USU_NOME LOGIN,\r\n          B.ESB_COD ESTAB\r\n        FROM\r\n          SINUSUARIOS A, SINUSUSETOR B, SINSETOR C\r\n        WHERE\r\n          (B.USU_NOME = '${user}' AND A.USU_SENHA = '${pass}') AND\r\n          A.USU_NOME = B.USU_NOME AND\r\n          B.SET_COD = C.SET_COD\r\n    `;\r\n\r\n    const data = await conn.execute(query);\r\n\r\n    if (conn) await conn.close();\r\n\r\n    return data.rows[0];\r\n  }\r\n}\r\n","import Signin from '@models/Signin';\r\nimport md5 from 'md5';\r\nimport jwt from 'jsonwebtoken';\r\nimport Auth from '@config/auth';\r\nimport AppError from '@errors/AppError';\r\nimport { UserParameters } from '../types';\r\n\r\nconst signinModel = new Signin();\r\n\r\nexport default class SessionController {\r\n  public async logon(params: UserParameters): Promise<{\r\n    token: string;\r\n    user: string;\r\n  }> {\r\n    if (!params.user || !params.pass) {\r\n      throw new AppError('UsuÃ¡rio ou Senha ObrigatÃ³rios', 400);\r\n    }\r\n\r\n    const data = {\r\n      user: params.user.toLocaleUpperCase(),\r\n      pass: md5(params.pass.toLocaleUpperCase()).toLocaleUpperCase(),\r\n    };\r\n\r\n    const userlogged = await signinModel.create(data);\r\n\r\n    if (!userlogged) {\r\n      throw new AppError('UsuÃ¡rio ou Senha Incorretos! Tente Novamente.', 400);\r\n    }\r\n\r\n    const { secret, expiresIn } = Auth.jwt;\r\n\r\n    const token = jwt.sign({ data: userlogged }, secret, { expiresIn });\r\n\r\n    return {\r\n      token,\r\n      user: params.user,\r\n    };\r\n  }\r\n}\r\n","export default {\r\n  jwt: {\r\n    secret: 'ce7d3b8bea4348b29b74f0685057854e673e5416',\r\n    expiresIn: '1d',\r\n  },\r\n};\r\n","class AppError {\r\n  public readonly message: string;\r\n\r\n  public readonly statusCode: number;\r\n\r\n  constructor(message: string, statusCode = 400) {\r\n    this.message = message;\r\n    this.statusCode = statusCode;\r\n  }\r\n}\r\n\r\nexport default AppError;\r\n","import { Router } from 'express';\r\nimport ValidateToken from '../middlewares/ValidadeToken';\r\n\r\nconst appRoutes = Router();\r\n\r\nappRoutes.get('/', (request, response) => {\r\n  if (request.cookies.token) {\r\n    return response.redirect('/home');\r\n  }\r\n\r\n  return response.render('index', { auth: true });\r\n});\r\n\r\nappRoutes.get('/home', ValidateToken, (request, response) => {\r\n  response.render('home', {\r\n    user: {\r\n      LOGIN:\r\n        request.user.data.LOGIN[0].toUpperCase() +\r\n        request.user.data.LOGIN.substr(1).toLowerCase(),\r\n      SETOR:\r\n        request.user.data.SETOR[0].toUpperCase() +\r\n        request.user.data.SETOR.substr(1).toLowerCase(),\r\n    },\r\n  });\r\n});\r\n\r\nappRoutes.get('/producao/apontamento', ValidateToken, (request, response) => {\r\n  return response.render('apontamento', {\r\n    user: {\r\n      LOGIN:\r\n        request.user.data.LOGIN[0].toUpperCase() +\r\n        request.user.data.LOGIN.substr(1).toLowerCase(),\r\n      SETOR:\r\n        request.user.data.SETOR[0].toUpperCase() +\r\n        request.user.data.SETOR.substr(1).toLowerCase(),\r\n    },\r\n  });\r\n});\r\n\r\nappRoutes.get('/producao/etiqueta', ValidateToken, (request, response) => {\r\n  return response.render('etiqueta', {\r\n    user: {\r\n      LOGIN:\r\n        request.user.data.LOGIN[0].toUpperCase() +\r\n        request.user.data.LOGIN.substr(1).toLowerCase(),\r\n      SETOR:\r\n        request.user.data.SETOR[0].toUpperCase() +\r\n        request.user.data.SETOR.substr(1).toLowerCase(),\r\n    },\r\n  });\r\n});\r\n\r\nappRoutes.get(\r\n  '/consultas/duplicatasAberto/',\r\n  ValidateToken,\r\n  (request, response) => {\r\n    response.render('duplicatasAberto', {\r\n      user: {\r\n        LOGIN:\r\n          request.user.data.LOGIN[0].toUpperCase() +\r\n          request.user.data.LOGIN.substr(1).toLowerCase(),\r\n        SETOR:\r\n          request.user.data.SETOR[0].toUpperCase() +\r\n          request.user.data.SETOR.substr(1).toLowerCase(),\r\n      },\r\n    });\r\n  },\r\n);\r\n\r\nappRoutes.get(\r\n  '/consultas/duplicatasAtraso/',\r\n  ValidateToken,\r\n  (request, response) => {\r\n    response.render('duplicatasAtraso', {\r\n      user: {\r\n        LOGIN:\r\n          request.user.data.LOGIN[0].toUpperCase() +\r\n          request.user.data.LOGIN.substr(1).toLowerCase(),\r\n        SETOR:\r\n          request.user.data.SETOR[0].toUpperCase() +\r\n          request.user.data.SETOR.substr(1).toLowerCase(),\r\n      },\r\n    });\r\n  },\r\n);\r\n\r\nexport default appRoutes;\r\n","import { Response, NextFunction, Request } from 'express';\r\nimport { verify } from 'jsonwebtoken';\r\nimport Auth from '../config/auth';\r\nimport { UserPayload } from '../types';\r\n\r\nexport default async function ValidateToken(\r\n  request: Request,\r\n  response: Response,\r\n  next: NextFunction,\r\n): Promise<void> {\r\n  const { token } = request.cookies;\r\n  const { secret } = Auth.jwt;\r\n\r\n  if (!token) {\r\n    return response.render('index', { auth: false });\r\n  }\r\n\r\n  try {\r\n    const decoded = verify(token, secret) as UserPayload;\r\n\r\n    request.user = decoded;\r\n    return next();\r\n  } catch {\r\n    return response.render('index', { auth: false });\r\n  }\r\n}\r\n","import { Router } from 'express';\r\nimport DataLoadingController from '../controllers/DataLoadingController';\r\nimport ValidateToken from '../middlewares/ValidadeToken';\r\n\r\nconst loadRoutes = Router();\r\nconst sessionController = new DataLoadingController();\r\n\r\nloadRoutes.get('/estab', ValidateToken, async (request, response) => {\r\n  const { ESTAB } = request.user.data;\r\n\r\n  const data = await sessionController.getEstab(ESTAB);\r\n  response.json(data);\r\n});\r\n\r\nloadRoutes.get('/setor', async (_, response) => {\r\n  const data = await sessionController.getSetor();\r\n  response.json(data);\r\n});\r\n\r\nloadRoutes.get('/clientes', async (_, response) => {\r\n  const data = await sessionController.getClientes();\r\n  response.json(data);\r\n});\r\n\r\nloadRoutes.get('/motivo', async (_, response) => {\r\n  const data = await sessionController.getMotivo();\r\n  response.json(data);\r\n});\r\n\r\nloadRoutes.get('/cor', async (request, response) => {\r\n  const data = request.query as unknown as {\r\n    ESB_COD: number;\r\n    OS_NUMER: number;\r\n  };\r\n\r\n  return response.json(await sessionController.getCor(data));\r\n});\r\nexport default loadRoutes;\r\n","import connection from '../database/connection';\nimport {\n  DataLoadingEstab,\n  DataLoadingSetor,\n  DataLoadingCliente,\n  DataLoadingMotivo,\n} from '../types';\n\nexport default class DataLoading {\n  public async estabelecimento(estab: number) {\n    const data = (\n      await (\n        await connection()\n      ).execute(`SELECT ESB_COD, ESB_DESC FROM SINESTAB ORDER BY ESB_COD`)\n    ).rows;\n\n    return data as DataLoadingEstab[];\n  }\n\n  public async setor() {\n    const data = (\n      await (\n        await connection()\n      ).execute('SELECT SET_COD, SET_DESC FROM SINSETOR')\n    ).rows;\n\n    return data as DataLoadingSetor[];\n  }\n\n  public async Clientes() {\n    const data = (\n      await (\n        await connection()\n      ).execute(\n        'SELECT CLI_COD, CLI_RAZAO_SOC FROM SINCLIENTES ORDER BY CLI_COD',\n      )\n    ).rows;\n\n    return data as DataLoadingCliente[];\n  }\n\n  public async Motivo() {\n    const data = (\n      await (\n        await connection()\n      ).execute(\n        \"SELECT MOC_COD, MOC_DESC FROM SINMOTIVO_OCORRENCIA WHERE MOC_ATIVO = 'S' ORDER BY MOC_COD\",\n      )\n    ).rows;\n\n    return data as DataLoadingMotivo[];\n  }\n\n  public async Cor(data: { ESB_COD: number; OS_NUMER: number }) {\n    const conn = await connection();\n\n    const query = `\n      SELECT ESB_COD, OS_NUMER, A.ITE_COD, A.ITE_COD||' - '||B.ITE_DESC DESC_ITEM\n      FROM SINOSITEM_INDUSTR A, SINITEM B\n      WHERE A.ESB_COD  = ${data.ESB_COD} AND\n            A.OS_NUMER = ${data.OS_NUMER} AND\n            A.TIP_COD  = B.TIP_COD AND\n            A.ITE_COD  = B.ITE_COD\n      GROUP BY ESB_COD, OS_NUMER, A.ITE_COD, B.ITE_DESC\n    `;\n\n    const result = await conn.execute(query);\n\n    return result.rows;\n  }\n}\n","import DataLoadingModel from '../models/DataLoading';\r\nimport { DataLoadingEstab } from '../types';\r\n\r\nconst dataLoading = new DataLoadingModel();\r\n\r\nexport default class DataLoadingController {\r\n  public async getEstab(estab: number) {\r\n    return dataLoading.estabelecimento(estab);\r\n  }\r\n\r\n  public async getSetor() {\r\n    return dataLoading.setor();\r\n  }\r\n\r\n  public async getClientes() {\r\n    return dataLoading.Clientes();\r\n  }\r\n\r\n  public async getMotivo() {\r\n    return dataLoading.Motivo();\r\n  }\r\n\r\n  public async getCor(data: { ESB_COD: number; OS_NUMER: number }) {\r\n    return dataLoading.Cor(data);\r\n  }\r\n}\r\n","import { Router } from 'express';\r\nimport ProductionController from '../controllers/ProdutionController';\r\nimport ValidateToken from '../middlewares/ValidadeToken';\r\nimport {\r\n  AppontData,\r\n  AppontDataEtq,\r\n  GetDataOS,\r\n  GetDataOSAppontEtq,\r\n  GetValidateOS,\r\n} from '../types';\r\n\r\nconst produtionController = new ProductionController();\r\nconst productionRouter = Router();\r\n\r\nproductionRouter.get('/listOS', ValidateToken, async (request, response) => {\r\n  const data = request.query as unknown;\r\n\r\n  response.json(await produtionController.getDataOs(data as GetDataOS));\r\n});\r\n\r\nproductionRouter.get(\r\n  '/listOSAppont',\r\n  // ValidateToken,\r\n  async (request, response) => {\r\n    const data = request.query as unknown as GetDataOSAppontEtq;\r\n\r\n    response.json(await produtionController.getDataOSAppont(data));\r\n  },\r\n);\r\n\r\nproductionRouter.get(\r\n  '/validateOS',\r\n  ValidateToken,\r\n  async (request, response) => {\r\n    const data = request.query as unknown;\r\n    response.json(\r\n      await produtionController.getValidateOS(data as GetValidateOS),\r\n    );\r\n  },\r\n);\r\n\r\nproductionRouter.post(\r\n  '/createAppont',\r\n  ValidateToken,\r\n  async (request, response) => {\r\n    const data = request.body;\r\n\r\n    produtionController.createAppont(data as AppontData[], request.user);\r\n\r\n    response.status(200).end();\r\n  },\r\n);\r\n\r\nproductionRouter.post(\r\n  '/createAppontEtq',\r\n  ValidateToken,\r\n  async (request, response) => {\r\n    const data = request.body as unknown as AppontDataEtq[];\r\n\r\n    produtionController.CreateAppontEtq(data as AppontDataEtq[], request.user);\r\n\r\n    response.status(200).end();\r\n  },\r\n);\r\n\r\nproductionRouter.get(\r\n  '/appontHome',\r\n  ValidateToken,\r\n  async (request, response) => {\r\n    return response.json(\r\n      await produtionController.getAppontHome(request.user.data.COD_SETOR),\r\n    );\r\n  },\r\n);\r\n\r\nexport default productionRouter;\r\n","import sqlite from 'sqlite3';\n\nconst db = new sqlite.Database('log.db');\n\ntype DataInsertLogType = {\n  params: string;\n  user: string;\n  date: string;\n  type: 'insert' | 'update' | 'delete';\n  resource: string;\n};\n\ndb.run(\n  'CREATE TABLE IF NOT EXISTS log (id INTEGER PRIMARY KEY AUTOINCREMENT, params TEXT, user TEXT, date TEXT, type TEXT, resource TEXT)',\n);\n\nexport default async function InsertLog(data: DataInsertLogType) {\n  try {\n    db.run(\n      'INSERT INTO log (params, user, date, type, resource) VALUES (?, ?, ?, ?, ?)',\n      [data.params, data.user, data.date, data.type, data.resource],\n    );\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import { Connection } from 'oracledb';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport connection from '../database/connection';\nimport {\n  GetDataOS,\n  GetValidateOS,\n  ResponseGetDataOS,\n  AppontData,\n  AppontDataEtq,\n  UserPayload,\n  GetDataOSAppontEtq,\n} from '../types';\nimport AppError from '../errors/AppError';\n\ntype ResponseDataGetOSAppont = {\n  OSI_SEQ: number;\n  OSS_SEQ: number;\n  ITE_COD: string;\n  OSS_ITE_COD: string;\n  QUANT_PC: number;\n  QUANT_KG: number;\n};\n\nexport default class ProductionModel {\n  private GetFIle(pathFile: string): string {\n    if (pathFile) {\n      return pathFile.replaceAll('\\\\', ' ').split(' ').at(-1);\n    }\n    return '';\n  }\n\n  public async getDataOS(data: GetDataOS) {\n    const conn = await connection();\n\n    const queryValidateSetor = `\n      SELECT SPO_SEQ\n      FROM SINSETPROC_OS\n      WHERE ESB_COD = ${data.Estab} AND SET_COD = ${data.Setor}\n    `;\n\n    const resultQuery = (\n      await conn.execute<{ SPO_SEQ: number }>(queryValidateSetor)\n    ).rows[0];\n\n    const Seq = resultQuery?.SPO_SEQ;\n\n    if (Seq === undefined) {\n      throw new AppError(\n        'Seq. de Processo informado nÃ£o vinculado ao estabelecimento',\n        400,\n      );\n    }\n\n    let queryDataAppont = '';\n\n    // const queryDataAppont = `\n    //   SELECT A.ESB_COD,\n    //          A.OS_NUMER,\n    //         A.OSI_SEQ,\n    //         A.OSS_SEQ,\n    //         A.TIP_COD,\n    //         A.ITE_COD COD_COR,\n    //         A.OSS_ITE_COD COD_PERFIL,\n    //         A.OSS_QUANT QUANT_KG,\n    //         A.OSS_QUANT_PECAS QUANT_PC,\n    //         IMAGEM,\n    //         ITEM,\n    //         NVL(B.IPO_SEQ, 0) + 1 SEQ_APONT,\n    //         DECODE(${\n    //           Seq - 1\n    //         }, 1, (-1) * SUM(QUANT_RESTANTE),SUM(NVL(QUANT_RESTANTE,0) + OSS_QUANT_PECAS + NVL(QUANT_REJEITADA,0))) QUANT_RESTANTE\n    // FROM SINOSITEM_INDUSTR A\n    //       INNER JOIN (SELECT A.ESB_COD,\n    //                         OS_NUMER,\n    //                         OSI_SEQ,\n    //                         OSS_SEQ,\n    //                         NVL(A.SPO_SEQ, 0) SPO_SEQ,\n    //                         B.SET_COD,\n    //                         IPO_SEQ\n    //                   FROM SININFOSETPROC_OS A, SINSETPROC_OS B\n    //                   WHERE A.SET_COD  = B.SET_COD AND\n    //                         A.ESB_COD  = B.ESB_COD\n    //                   ) B ON (A.ESB_COD    = B.ESB_COD(+) AND\n    //                           A.OS_NUMER  = B.OS_NUMER(+) AND\n    //                           A.OSI_SEQ    = B.OSI_SEQ(+) AND\n    //                           A.OSS_SEQ    = B.OSS_SEQ(+))\n    //       LEFT JOIN (SELECT C.ESB_COD,\n    //                         C.OS_NUMER,\n    //                         C.OSI_SEQ,\n    //                         C.OSS_SEQ,\n    //                         DECODE(C.SPO_SEQ, NULL, 1, C.SPO_SEQ) SPO_SEQ,\n    //                         (-1)*NVL(SUM(C.IPO_QUANT_PROD), 0)             QUANT_RESTANTE,\n    //                         (-1)*NVL(SUM(C.IPO_QUANT_REJEI), 0)            QUANT_REJEITADA,\n    //                         F.ITE_IMAGEM                                   IMAGEM,\n    //                         E.ITE_COD                                      ITEM\n    //                 FROM  SININFOSETPROC_OS C, SINOSITEM_INDUSTR D, SINOSITEM E, SINITEM F\n    //                 WHERE C.ESB_COD = D.ESB_COD AND\n    //                       C.OS_NUMER = D.OS_NUMER AND\n    //                       C.OSI_SEQ = D.OSI_SEQ AND\n    //                       C.OSS_SEQ = D.OSS_SEQ AND\n    //                       D.ESB_COD = E.ESB_COD AND\n    //                       D.OS_NUMER = E.OS_NUMER AND\n    //                       D.OSI_SEQ = E.OSI_SEQ AND\n    //                       E.TIP_COD = F.TIP_COD AND\n    //                       E.ITE_COD = F.ITE_COD\n    //                 GROUP BY C.ESB_COD, C.OS_NUMER, C.OSI_SEQ, C.SPO_SEQ,F.ITE_IMAGEM, C.OSS_SEQ, E.ITE_COD\n    //                 UNION\n    //                   (SELECT C.ESB_COD,\n    //                           C.OS_NUMER,\n    //                           C.OSI_SEQ,\n    //                           C.OSS_SEQ,\n    //                           DECODE(C.SPO_SEQ, NULL, 1, C.SPO_SEQ) + 1 SPO_SEQ,\n    //                           NVL(SUM(C.IPO_QUANT_PROD), 0)             QUANT_RESTANTE,\n    //                           NVL(SUM(C.IPO_QUANT_REJEI), 0)            QUANT_REJEITADA,\n    //                           F.ITE_IMAGEM                              IMAGEM,\n    //                           E.ITE_COD                                 ITEM\n    //                     FROM SININFOSETPROC_OS C, SINOSITEM_INDUSTR D, SINOSITEM E, SINITEM F\n    //                     WHERE C.ESB_COD = D.ESB_COD AND\n    //                           C.OS_NUMER = D.OS_NUMER AND\n    //                           C.OSI_SEQ = D.OSI_SEQ AND\n    //                           C.OSS_SEQ = D.OSS_SEQ AND\n    //                           D.ESB_COD = E.ESB_COD AND\n    //                           D.OS_NUMER = E.OS_NUMER AND\n    //                           D.OSI_SEQ = E.OSI_SEQ AND\n    //                           E.TIP_COD = F.TIP_COD AND\n    //                           E.ITE_COD = F.ITE_COD\n    //                     GROUP BY C.ESB_COD, C.OS_NUMER, C.OSI_SEQ, C.SPO_SEQ, F.ITE_IMAGEM,C.OSS_SEQ, E.ITE_COD)\n    //                 ) C ON (A.ESB_COD = C.ESB_COD AND\n    //                         A.OS_NUMER = C.OS_NUMER AND\n    //                         A.OSI_SEQ = C.OSI_SEQ AND\n    //                         A.OSS_SEQ = C.OSS_SEQ AND\n    //                         B.SPO_SEQ = C.SPO_SEQ)\n    // WHERE A.ESB_COD  = ${data.Estab} and\n    //       A.OS_NUMER = ${data.OS} and\n    //       A.ITE_COD  = '${data.Cor}'\n    //       ${lastAppont === 0 ? '' : `AND IPO_SEQ = ${lastAppont}`}\n    // GROUP BY A.ESB_COD,\n    //           A.OS_NUMER,\n    //           A.OSI_SEQ,\n    //           A.OSS_SEQ,\n    //           A.STO_COD,\n    //           A.TIP_COD,\n    //           A.ITE_COD,\n    //           A.OSS_ITE_COD,\n    //           A.OSS_QUANT,\n    //           A.OSS_QUANT_PECAS,\n    //           B.SPO_SEQ,\n    //           B.SET_COD,\n    //           IMAGEM,\n    //           ITEM,\n    //           B.IPO_SEQ\n    // ORDER BY A.ESB_COD\n    // `;\n    if (Seq === 1) {\n      queryDataAppont = `\n          SELECT A.ESB_COD,\n          A.OS_NUMER,\n          A.OSI_SEQ,\n          A.OSS_SEQ,\n          A.TIP_COD,\n          A.ITE_COD COD_COR,\n          A.OSS_ITE_COD COD_PERFIL,\n          A.OSS_QUANT QUANT_KG,\n          A.OSS_QUANT_PECAS QUANT_PC,\n          NVL(QUANT_RESTANTE,0) + OSS_QUANT_PECAS +  NVL(QUANT_REJEITADA,0) QUANT_RESTANTE\n    FROM SINOSITEM_INDUSTR A\n      INNER JOIN (SELECT A.ESB_COD,\n                        OS_NUMER,\n                        OSI_SEQ,\n                        OSS_SEQ,\n                        NVL(A.SPO_SEQ, 0) SPO_SEQ,\n                        B.SET_COD,\n                        IPO_SEQ\n                  FROM SININFOSETPROC_OS A, SINSETPROC_OS B\n                  WHERE A.SET_COD  = B.SET_COD AND\n                        A.ESB_COD  = B.ESB_COD\n                  ) B ON (A.ESB_COD    = B.ESB_COD(+) AND\n                          A.OS_NUMER  = B.OS_NUMER(+) AND\n                          A.OSI_SEQ    = B.OSI_SEQ(+) AND\n                          A.OSS_SEQ    = B.OSS_SEQ(+))\n      LEFT JOIN (SELECT C.ESB_COD,\n                        C.OS_NUMER,\n                        C.OSI_SEQ,\n                        C.OSS_SEQ,\n                        DECODE(C.SPO_SEQ, NULL, 1, C.SPO_SEQ) SPO_SEQ,\n                        (-1)*NVL(SUM(C.IPO_QUANT_PROD), 0)             QUANT_RESTANTE,\n                        (-1)*NVL(SUM(C.IPO_QUANT_REJEI), 0)            QUANT_REJEITADA\n                FROM  SININFOSETPROC_OS C, SINOSITEM_INDUSTR D\n                WHERE C.ESB_COD = D.ESB_COD AND\n                      C.OS_NUMER = D.OS_NUMER AND\n                      C.OSI_SEQ = D.OSI_SEQ AND\n                      C.OSS_SEQ = D.OSS_SEQ\n                GROUP BY C.ESB_COD, C.OS_NUMER, C.OSI_SEQ, C.SPO_SEQ,C.OSS_SEQ\n                UNION\n                  (SELECT C.ESB_COD,\n                          C.OS_NUMER,\n                          C.OSI_SEQ,\n                          C.OSS_SEQ,\n                          DECODE(C.SPO_SEQ, NULL, 1, C.SPO_SEQ) + 1 SPO_SEQ,\n                          NVL(SUM(C.IPO_QUANT_PROD), 0)             QUANT_RESTANTE,\n                          NVL(SUM(C.IPO_QUANT_REJEI), 0)            QUANT_REJEITADA\n                    FROM SININFOSETPROC_OS C, SINOSITEM_INDUSTR D\n                    WHERE C.ESB_COD = D.ESB_COD AND\n                          C.OS_NUMER = D.OS_NUMER AND\n                          C.OSI_SEQ = D.OSI_SEQ AND\n                          C.OSS_SEQ = D.OSS_SEQ\n                    GROUP BY C.ESB_COD, C.OS_NUMER, C.OSI_SEQ, C.SPO_SEQ, C.OSS_SEQ)\n                ) C ON (A.ESB_COD = C.ESB_COD AND\n                        A.OS_NUMER = C.OS_NUMER AND\n                        A.OSI_SEQ = C.OSI_SEQ AND\n                        A.OSS_SEQ = C.OSS_SEQ AND\n                        B.SPO_SEQ = C.SPO_SEQ)\n    WHERE A.ESB_COD  = ${data.Estab} and\n      A.OS_NUMER = ${data.OS} and\n      A.ITE_COD  = '${data.Cor}'\n    GROUP BY A.ESB_COD,\n          A.OS_NUMER,\n          A.OSI_SEQ,\n          A.OSS_SEQ,\n          A.STO_COD,\n          A.TIP_COD,\n          A.ITE_COD,\n          A.OSS_ITE_COD,\n          A.OSS_QUANT,\n          A.OSS_QUANT_PECAS,\n          QUANT_RESTANTE,\n          QUANT_REJEITADA\n    ORDER BY A.ESB_COD, OS_NUMER, OSI_SEQ, OSS_SEQ\n      `;\n    } else {\n      queryDataAppont = `\n      SELECT  C.ESB_COD,\n        C.OS_NUMER,\n        C.OSI_SEQ,\n        C.OSS_SEQ,\n        C.OSS_SEQ,\n        D.TIP_COD,\n        D.ITE_COD COD_COR,\n        D.OSS_ITE_COD COD_PERFIL,\n        D.OSS_QUANT QUANT_KG,\n        D.OSS_QUANT_PECAS QUANT_PC,\n        NVL(NVL(SUM(C.IPO_QUANT_PROD), 0), D.OSS_QUANT_PECAS) + NVL((\n             SELECT\n                (-1)* NVL(SUM(ZC.IPO_QUANT_PROD), 0)\n             FROM  SININFOSETPROC_OS ZC, SINOSITEM_INDUSTR ZD\n             WHERE ZC.ESB_COD(+)  = ZD.ESB_COD AND\n                   ZC.OS_NUMER(+) = ZD.OS_NUMER AND\n                   ZC.OSI_SEQ(+)  = ZD.OSI_SEQ AND\n                   ZC.OSS_SEQ(+)  = ZD.OSS_SEQ AND\n                   ZD.ESB_COD  = ${data.Estab} AND\n                   ZD.OS_NUMER = ${data.OS} AND\n                   ZC.SPO_SEQ  = ${Seq} AND\n                   ZD.ITE_COD = D.ITE_COD\n             GROUP BY ZC.ESB_COD, ZC.OS_NUMER,\n                      ZC.OSI_SEQ, ZC.SPO_SEQ,\n                      ZC.OSS_SEQ, ZD.TIP_COD,\n                      ZD.ITE_COD, ZD.OSS_ITE_COD,\n                      ZD.OSS_QUANT, ZD.OSS_QUANT_PECAS\n        ), 0) QUANT_RESTANTE,\n        NVL(SUM(C.IPO_QUANT_REJEI), 0)            QUANT_REJEITADA\n      FROM SININFOSETPROC_OS C, SINOSITEM_INDUSTR D\n      WHERE C.ESB_COD = D.ESB_COD AND\n            C.OS_NUMER = D.OS_NUMER AND\n            C.OSI_SEQ = D.OSI_SEQ AND\n            C.OSS_SEQ = D.OSS_SEQ AND\n            C.ESB_COD = ${data.Estab} AND\n            C.OS_NUMER = ${data.OS} AND\n            C.SPO_SEQ = ${Seq - 1} AND\n            D.ITE_COD = '${data.Cor}'\n      GROUP BY C.ESB_COD, C.OS_NUMER, C.OSI_SEQ, C.SPO_SEQ,C.OSS_SEQ, D.TIP_COD, D.ITE_COD, D.OSS_ITE_COD, D.OSS_QUANT, D.OSS_QUANT_PECAS\n      ORDER BY C.ESB_COD, C.OS_NUMER, C.OSI_SEQ, C.OSS_SEQ\n      `;\n    }\n\n    const dataResponse = await conn.execute<{\n      OSI_SEQ: number;\n      OSS_SEQ: number;\n      SEQ_APONT: number;\n      TIP_COD: number;\n      COD_COR: string;\n      COD_PERFIL: string;\n      QUANT_PC: number;\n      QUANT_KG: number;\n      QUANT_RESTANTE: number;\n      QUANT_REJEITADA: number;\n    }>(queryDataAppont);\n\n    const datafilter = dataResponse.rows.filter(\n      item => item.QUANT_RESTANTE > 0,\n    );\n\n    const dataMapped = await Promise.all(\n      datafilter.map(async item => {\n        const query = `\n          SELECT NVL(MAX(B.IPO_SEQ), 0) + 1 SEQ_APONT,\n                  C.ITE_COD ITEM,\n                  D.ITE_IMAGEM\n          FROM SINOSITEM_INDUSTR A, SININFOSETPROC_OS B, SINOSITEM C, SINITEM D\n          WHERE A.ESB_COD  = ${data.Estab} AND\n                A.OS_NUMER = ${data.OS} AND\n                A.OSI_SEQ  = ${item.OSI_SEQ} AND\n                A.OSS_SEQ  = ${item.OSS_SEQ} AND\n                A.ESB_COD = B.ESB_COD(+) AND\n                A.OS_NUMER = B.OS_NUMER(+) AND\n                A.OSI_SEQ = B.OSI_SEQ(+) AND\n                A.OSS_SEQ = B.OSS_SEQ(+) AND\n                A.ESB_COD = C.ESB_COD AND\n                A.OS_NUMER = C.OS_NUMER AND\n                A.OSI_SEQ = C.OSI_SEQ AND\n                C.TIP_COD = D.TIP_COD AND\n                C.ITE_COD = D.ITE_COD\n          GROUP BY C.ITE_COD, D.ITE_IMAGEM\n        `;\n\n        const result = await conn.execute<{\n          SEQ_APONT: number;\n          ITEM: string;\n          ITE_IMAGEM: string;\n        }>(query);\n\n        return {\n          ...item,\n          SEQ_APONT: result?.rows[0]?.SEQ_APONT || 1,\n          ITEM: result?.rows[0]?.ITEM,\n          ITE_IMAGEM: result?.rows[0]?.ITE_IMAGEM,\n        };\n      }),\n    );\n\n    return dataMapped.map(item => {\n      return {\n        ...item,\n        ITE_IMAGEM: this.GetFIle(item.ITE_IMAGEM),\n      };\n    });\n  }\n\n  public async getDataOSAppontEtq(data: GetDataOSAppontEtq) {\n    const conn = await connection();\n\n    //   const query = `\n    //   SELECT\n    //   A.OSI_SEQ,\n    //   A.OSS_SEQ,\n    //   B.TIP_COD,\n    //   B.ITE_COD, B.OSS_ITE_COD,\n    //   DECODE('${data.tipo}', 'prod', A.IPO_QUANT_PROD, A.IPO_QUANT_REJEI) -\n    //   (SELECT NVL(SUM(ZA.IPO_QUANT_PACOTES * ZA.IPO_QUANT_ETIQUETAS), 0)\n    //    FROM SININFOSETPROC_ETIQUETA ZA\n    //    WHERE ZA.ESB_COD = A.ESB_COD AND\n    //          ZA.OS_NUMER = A.OS_NUMER AND\n    //          ZA.OSI_SEQ = A.OSI_SEQ AND\n    //          ZA.OSS_SEQ = A.OSS_SEQ) QUANT_PC,\n    //   TRUNC(DECODE('${data.tipo}', 'prod', B.OSS_QUANT / B.OSS_QUANT_PECAS * A.IPO_QUANT_PROD - (SELECT NVL(SUM(ZA.IPO_QUANT_PACOTES * ZA.IPO_QUANT_ETIQUETAS), 0)\n    //    FROM SININFOSETPROC_ETIQUETA ZA\n    //    WHERE ZA.ESB_COD = A.ESB_COD AND\n    //          ZA.OS_NUMER = A.OS_NUMER AND\n    //          ZA.OSI_SEQ = A.OSI_SEQ AND\n    //          ZA.OSS_SEQ = A.OSS_SEQ), B.OSS_QUANT / B.OSS_QUANT_PECAS * A.IPO_QUANT_REJEI - (SELECT NVL(SUM(ZA.IPO_QUANT_PACOTES * ZA.IPO_QUANT_ETIQUETAS), 0)\n    //    FROM SININFOSETPROC_ETIQUETA ZA\n    //    WHERE ZA.ESB_COD = A.ESB_COD AND\n    //          ZA.OS_NUMER = A.OS_NUMER AND\n    //          ZA.OSI_SEQ = A.OSI_SEQ AND\n    //          ZA.OSS_SEQ = A.OSS_SEQ)),2) QUANT_KG\n    //  FROM\n    //   SININFOSETPROC_OS A, SINOSITEM_INDUSTR B\n    //  WHERE\n    //   A.ESB_COD = ${data.Estab} AND\n    //   A.OS_NUMER = ${data.OS} AND\n    //   A.SET_COD = ${data.Setor} AND\n    //   B.ITE_COD = '${data.cor}' AND\n    //   A.ESB_COD = B.ESB_COD AND\n    //   A.OS_NUMER = B.OS_NUMER AND\n    //   A.OSI_SEQ = B.OSI_SEQ AND\n    //   A.OSS_SEQ = B.OSS_SEQ\n    //   `;\n\n    const query = `\n    SELECT\n      A.OSI_SEQ,\n      A.OSS_SEQ,\n      B.TIP_COD,\n      B.ITE_COD,\n      B.OSS_ITE_COD,\n      SUM(DECODE('${data.tipo}', 'prod', A.IPO_QUANT_PROD, A.IPO_QUANT_REJEI) - NVL((\n        SELECT SUM(ZA.IPO_QUANT_PACOTES * ZA.IPO_QUANT_ETIQUETAS)\n        FROM SININFOSETPROC_ETIQUETA ZA\n        WHERE ZA.ESB_COD  = A.ESB_COD AND\n              ZA.OS_NUMER = A.OS_NUMER AND\n              ZA.OSI_SEQ  = A.OSI_SEQ AND\n              ZA.OSS_SEQ  = A.OSS_SEQ AND\n              TIPO_QUANT_APONT = '${data.tipo}'\n    \t),0)) QUANT_PC,\n      TRUNC(B.OSS_QUANT / B.OSS_QUANT_PECAS * DECODE('${data.tipo}', 'prod', A.IPO_QUANT_PROD, A.IPO_QUANT_REJEI) - NVL((\n        SELECT SUM(ZA.IPO_QUANT_PACOTES * ZA.IPO_QUANT_ETIQUETAS)\n        FROM SININFOSETPROC_ETIQUETA ZA\n        WHERE ZA.ESB_COD  = A.ESB_COD AND\n              ZA.OS_NUMER = A.OS_NUMER AND\n              ZA.OSI_SEQ  = A.OSI_SEQ AND\n              ZA.OSS_SEQ  = A.OSS_SEQ AND\n              TIPO_QUANT_APONT = '${data.tipo}'\n    \t),0),4) QUANT_KG\n   FROM\n    SININFOSETPROC_OS A, SINOSITEM_INDUSTR B\n   WHERE\n    A.ESB_COD = ${data.Estab} AND\n    A.OS_NUMER = ${data.OS} AND\n    A.SET_COD = ${data.Setor} AND\n    B.ITE_COD = '${data.cor}' AND\n    A.ESB_COD = B.ESB_COD AND\n    A.OS_NUMER = B.OS_NUMER AND\n    A.OSI_SEQ = B.OSI_SEQ AND\n    A.OSS_SEQ = B.OSS_SEQ\n  GROUP BY\n      A.ESB_COD,\n      A.OS_NUMER,\n      A.OSI_SEQ,\n      A.OSS_SEQ,\n      B.TIP_COD,\n      B.ITE_COD,\n      B.OSS_ITE_COD,\n      B.OSS_QUANT,\n      B.OSS_QUANT_PECAS,\n      A.IPO_QUANT_PROD,\n      A.IPO_QUANT_REJEI\n    `;\n\n    const getSeqApont = `\n    SELECT\n      NVL(MAX(IPO_SEQ) + 1, 1) SEQ_APONT\n    FROM\n      SININFOSETPROC_ETIQUETA A\n    WHERE\n      A.ESB_COD  = ${data.Estab} AND\n      A.OS_NUMER = ${data.OS}\n    `;\n\n    try {\n      const responseData = await conn.execute<ResponseDataGetOSAppont>(query);\n\n      const getSeqApontResponse = await conn.execute<{ SEQ_APONT: number }>(\n        getSeqApont,\n      );\n\n      const dataResponse = responseData.rows.map(item => {\n        return {\n          ...item,\n          SEQ_APONT: getSeqApontResponse.rows[0].SEQ_APONT,\n        };\n      });\n\n      return dataResponse;\n    } catch (error) {\n      console.log(error);\n      throw new AppError('Problemas ao buscar os dados da OS.', 500);\n    }\n  }\n\n  public async getValidateOS({ OS, Estab }: GetValidateOS) {\n    const conn = await connection();\n    const query = `\n  SELECT\n    A.OS_NUMER,\n    B.CLI_COD||'-'||SUBSTR(C.CLI_RAZAO_SOC, 0, 30) CLIENTE\n  FROM\n    SINOSITEM_INDUSTR A,\n    SINORDSERVICO B,\n    SINCLIENTES C\n  WHERE\n    A.ESB_COD = ${Estab} AND\n    A.OS_NUMER = ${OS} AND\n    A.ESB_COD = B.ESB_COD AND\n    A.OS_NUMER = B.OS_NUMER AND\n    B.CLI_COD = C.CLI_COD`;\n\n    const data = await conn.execute(query);\n\n    if (conn) await conn.close();\n\n    return data.rows[0] as ResponseGetDataOS;\n  }\n\n  public async CreateAppont(appont: AppontData[], user: UserPayload) {\n    const conn = await connection();\n\n    // console.log(appont);\n\n    const resultQuery = (\n      await conn.execute<{ SPO_SEQ: number }>(`\n      SELECT SPO_SEQ\n      FROM SINSETPROC_OS\n      WHERE ESB_COD = ${appont[0].ESB_COD} AND SET_COD = ${appont[0].SET_COD}`)\n    ).rows[0];\n\n    if (resultQuery === undefined) {\n      throw new AppError(\n        'Seq. de Processo informado nÃ£o vinculado ao estabelecimento',\n        400,\n      );\n    }\n\n    const appontItem = appont.map(item => {\n      return {\n        ESB_COD: item.ESB_COD,\n        OS_NUMER: item.OS_NUMER,\n        OSI_SEQ: item.OSI_SEQ,\n        OSS_SEQ: item.OSS_SEQ,\n        SET_COD: item.SET_COD,\n        SPO_SEQ: resultQuery.SPO_SEQ,\n        IPO_SEQ: item.IPO_SEQ,\n        IPO_QUANT_PROD: item.IPO_QUANT_PROD,\n        IPO_QUANT_REJEI: item.IPO_QUANT_REJEI,\n        IPO_USUAR: user.data.LOGIN,\n        IPO_OBS: null,\n        OPE_COD: null,\n        MOC_COD: item.MOC_COD,\n        OSS_OBS: item.OSS_OBS,\n      };\n    });\n\n    const query = `\n\n      INSERT INTO SININFOSETPROC_OS (\n        ESB_COD, OS_NUMER, OSI_SEQ, OSS_SEQ, SET_COD, SPO_SEQ, IPO_SEQ,\n        IPO_DATA_EMIS, IPO_HORA_EMIS, IPO_DATA_TERM, IPO_HORA_TERM,\n        IPO_QUANT_PROD,IPO_QUANT_REJEI, IPO_USUAR, IPO_DATA_SIST, IPO_OBS,\n        OPE_COD,MOC_COD,OSS_OBS\n      )\n      VALUES (\n        :ESB_COD, :OS_NUMER, :OSI_SEQ, :OSS_SEQ, :SET_COD, :SPO_SEQ, :IPO_SEQ,\n        TRUNC(SYSDATE), TO_CHAR(SYSDATE,'HH24:MM:SS'), TRUNC(SYSDATE), TO_CHAR(SYSDATE,'HH24:MM:SS'),\n        :IPO_QUANT_PROD, :IPO_QUANT_REJEI, :IPO_USUAR, TRUNC(SYSDATE), :IPO_OBS, :OPE_COD, :MOC_COD, :OSS_OBS\n      )\n    `;\n\n    try {\n      await conn.executeMany(query, appontItem);\n      await conn.commit();\n    } catch (err) {\n      await conn.rollback();\n      console.log(err);\n    } finally {\n      if (conn) await conn.close();\n    }\n  }\n\n  public async CreateAppontEtq(appont: AppontDataEtq[], user: UserPayload) {\n    const conn = await connection();\n\n    const appontItem = appont.map(item => {\n      return {\n        ESB_COD: item.ESB_COD,\n        OS_NUMER: item.OS_NUMER,\n        OSI_SEQ: item.OSI_SEQ,\n        OSS_SEQ: item.OSS_SEQ,\n        SET_COD: item.SET_COD,\n        IPO_SEQ: item.IPO_SEQ,\n        IPO_QUANT_PACOTES: item.IPO_QUANT_PACOTES,\n        IPO_QUANT_ETIQUETAS: item.IPO_QUANT_ETIQUETAS,\n        IPO_USUAR: user.data.LOGIN,\n      };\n    });\n\n    const query = `\n    INSERT INTO SININFOSETPROC_ETIQUETA (\n      esb_cod,os_numer,osi_seq,\n      oss_seq,set_cod,ipo_seq,\n      ipo_data_emis,ipo_hora_emis,\n      ipo_quant_pacotes,ipo_quant_etiquetas,\n      ipo_usuar\n    )\n    VALUES (\n      :ESB_COD, :OS_NUMER, :OSI_SEQ, :OSS_SEQ, :SET_COD, :IPO_SEQ,\n      TRUNC(SYSDATE), TO_CHAR(SYSDATE,'HH24:MM:SS'),:IPO_QUANT_PACOTES, :IPO_QUANT_ETIQUETAS,\n      :IPO_USUAR\n    )\n  `;\n\n    try {\n      await conn.executeMany(query, appontItem);\n      await conn.commit();\n    } catch (err) {\n      await conn.rollback();\n      console.log(err);\n    } finally {\n      if (conn) await conn.close();\n    }\n  }\n\n  public async getAppontHome(setor: number) {\n    const conn = await connection();\n\n    const querySeqSetor = `\n      SELECT SPO_SEQ\n      FROM SINSETPROC_OS\n      WHERE SET_COD = ${setor}\n    `;\n\n    const queryBuscarApontados = `\n      SELECT A.ESB_COD, A.OS_NUMER,C.MCO_NUMER_DOC, D.FON_RAZAO_SOC, E.CLI_RAZAO_SOC\n      FROM SININFOSETPROC_OS A, SINOSITEM_INDUSTR B, SINORDSERVICO C, SINFORNEC D, SINCLIENTES E\n      WHERE A.SET_COD = ${setor} AND\n            A.ESB_COD(+)  = B.ESB_COD AND\n            A.OS_NUMER(+) = B.OS_NUMER AND\n            A.OSI_SEQ (+) = B.OSI_SEQ AND\n            A.OSS_SEQ(+)  = B.OSS_SEQ AND\n            (SELECT SUM(A.IPO_QUANT_PROD + A.IPO_QUANT_REJEI)\n              FROM SININFOSETPROC_OS ZA\n              WHERE ZA.ESB_COD = A.ESB_COD AND\n                    ZA.OS_NUMER = A.OS_NUMER AND\n                    ZA.OSI_SEQ = A.OSI_SEQ AND\n                    ZA.OSS_SEQ = A.OSS_SEQ AND\n                    ZA.SET_COD = A.SET_COD) <\n            (SELECT SUM(B.OSS_QUANT_PECAS)\n              FROM SINOSITEM_INDUSTR ZB\n              WHERE ZB.ESB_COD  = B.ESB_COD AND\n                    ZB.OS_NUMER = B.OS_NUMER AND\n                    ZB.OSI_SEQ  = B.OSI_SEQ\n            ) AND C.ESB_COD  = B.ESB_COD AND\n                  C.OS_NUMER = B.OS_NUMER AND\n                  C.FON_COD = D.FON_COD AND\n                  C.STO_COD < 90 AND\n                  E.CLI_COD = C.CLI_COD\n      GROUP BY A.ESB_COD, A.OS_NUMER, A.OSI_SEQ, C.MCO_NUMER_DOC, D.FON_RAZAO_SOC, E.CLI_RAZAO_SOC\n      ORDER BY A.ESB_COD, A.OS_NUMER\n    `;\n\n    const queryBuscarNaoApontados = `\n      SELECT A.ESB_COD, A.OS_NUMER, B.MCO_NUMER_DOC, C.FON_RAZAO_SOC, D.CLI_RAZAO_SOC\n      FROM SINOSITEM_INDUSTR A, SINORDSERVICO B, SINFORNEC C, SINCLIENTES D\n      WHERE A.ESB_COD = B.ESB_COD AND\n            A.OS_NUMER = B.OS_NUMER AND\n            B.FON_COD = C.FON_COD AND\n        NOT EXISTS (\n            SELECT * FROM SININFOSETPROC_OS ZA\n            WHERE ZA.ESB_COD  = A.ESB_COD AND\n                  ZA.OS_NUMER = A.OS_NUMER AND\n                  ZA.OSI_SEQ  = A.OSI_SEQ\n      ) AND\n      LENGTH(A.OS_NUMER) < 10 AND\n      B.STO_COD < 90 AND\n      D.CLI_COD = B.CLI_COD\n      GROUP BY A.ESB_COD, A.OS_NUMER, B.MCO_NUMER_DOC, C.FON_RAZAO_SOC, D.CLI_RAZAO_SOC\n      ORDER BY ESB_COD, OS_NUMER\n    `;\n\n    const [{ SPO_SEQ: seq }] = (\n      await conn.execute<{ SPO_SEQ: number }>(querySeqSetor)\n    ).rows;\n\n    if (seq === 1) {\n      const resultApontados = (await conn.execute(queryBuscarApontados)).rows;\n      const resultNaoApontados = (await conn.execute(queryBuscarNaoApontados))\n        .rows;\n\n      return {\n        setor,\n        data: [...resultApontados, ...resultNaoApontados],\n      };\n    }\n    const result = (await conn.execute(queryBuscarApontados)).rows;\n    return result;\n  }\n}\n","import InsertLog from 'src/database/sqlite3.connection';\nimport ProductionModel from '../models/Production';\nimport AppError from '../errors/AppError';\nimport {\n  AppontData,\n  GetDataOS,\n  GetValidateOS,\n  UserPayload,\n  GetDataOSAppontEtq,\n  AppontDataEtq,\n} from '../types';\n\nconst productionModel = new ProductionModel();\n\nexport default class ProductionController {\n  public async getDataOs(data: GetDataOS) {\n    if (!data.Estab || !data.OS || !data.Setor || !data.Cor) {\n      throw new AppError('Parametros Informados Incorretos');\n    }\n\n    const result = await productionModel.getDataOS(data);\n    return result;\n  }\n\n  public async getDataOSAppont(data: GetDataOSAppontEtq) {\n    if (!data.Estab || !data.OS || !data.Setor || !data.cor) {\n      throw new AppError('Parametros Informados Incorretos');\n    }\n\n    const result = await productionModel.getDataOSAppontEtq(data);\n    return result;\n  }\n\n  public async getValidateOS(data: GetValidateOS) {\n    if (!data.Estab || !data.OS) {\n      throw new AppError('Parametros Informados Incorretos');\n    }\n\n    const result = await productionModel.getValidateOS(data);\n    return result;\n  }\n\n  public async createAppont(data: AppontData[], user: UserPayload) {\n    if (data.length === 0) {\n      throw new AppError('Parametros Informados Incorretos');\n    }\n\n    await InsertLog({\n      params: JSON.stringify(data),\n      user: user.data.LOGIN,\n      date: new Date().toLocaleString(),\n      type: 'insert',\n      resource: 'CriaÃ§Ã£o de Apontamento',\n    });\n\n    return productionModel.CreateAppont(data, user);\n  }\n\n  public CreateAppontEtq(data: AppontDataEtq[], user: UserPayload) {\n    if (data.length === 0) {\n      throw new AppError('Parametros Informados Incorretos');\n    }\n\n    return productionModel.CreateAppontEtq(data, user);\n  }\n\n  public async getAppontHome(setor: number) {\n    return productionModel.getAppontHome(setor);\n  }\n}\n","import { Router } from 'express';\r\nimport { DuplicatasAberto } from '../types';\r\nimport FinancesController from '../controllers/FinancesController';\r\nimport ValidateToken from '../middlewares/ValidadeToken';\r\n\r\nconst financesRoutes = Router();\r\nconst financesController = new FinancesController();\r\n\r\nfinancesRoutes.get('/dupAberto', async (request, response) => {\r\n  const data = request.query as unknown;\r\n  const responseData = await financesController.getDuplicatasAberto(\r\n    data as DuplicatasAberto,\r\n  );\r\n\r\n  const statusCode = responseData.length === 0 ? 404 : 200;\r\n\r\n  response.status(statusCode).json(responseData);\r\n});\r\n\r\nfinancesRoutes.get('/dupAtraso', async (request, response) => {\r\n  const data = request.query as unknown;\r\n  const responseData = await financesController.getDuplicataAtraso(\r\n    data as DuplicatasAberto,\r\n  );\r\n\r\n  const statusCode = responseData.length === 0 ? 404 : 200;\r\n\r\n  response.status(statusCode).json(responseData);\r\n});\r\n\r\nexport default financesRoutes;\r\n","import dayjs from 'dayjs';\nimport connection from '../database/connection';\nimport { DuplicatasAberto, DuplicatasAtraso } from '../types';\n\nexport default class Finances {\n  public async duplicasAberto(data: DuplicatasAberto) {\n    const conn = await connection();\n\n    const query = `\n\n          SELECT TO_CHAR(SYSDATE, 'DD/MM/YYYY')   DATA_SISTEMA,\n          TO_CHAR(SYSDATE, 'HH:MI')                        HORA_SISTEMA,\n          A.ESB_COD                                                      ESTAB_COD,\n          B.ESB_DESC                                                    ESTAB_NOME,\n          A.CLI_COD                                                        CLI_COD,\n        SUBSTR(C.CLI_RAZAO_SOC,1,20)                  CLI_NOME,\n          C.CLI_FONE                                                      TELEFONE,\n          SUBSTR(D.VEN_NOME,1,20)                                   VENDEDOR,\n          A.DUP_NUMER||'/'||DUP_SEQ                                 DUPLIC,\n          A.DUP_DATA_PRORROGA                                     DT_VENC,\n          A.DUP_VALOR_CR$ - A.DUP_VALOR_ABATI_CR$ + A.DUP_VALOR_JUROS_CR$ - A.DUP_VALOR_DESC_CR$ - A.DUP_VALOR_PAGTO_CR$      VALOR_CR$,\n          TRUNC(SYSDATE) - DUP_DATA_PRORROGA         ATRASO,\n          A.DUP_NUMER_BANCO\n      FROM   SINDUPLIC A, SINESTAB B, SINCLIENTES C, SINVENDEDOR D\n      WHERE  (A.ESB_COD = 1 AND\n                    A.DUP_DATA_PRORROGA >= TRUNC(SYSDATE)    AND\n                    --A.DUP_DATA_PRORROGA < TRUNC(SYSDATE)     AND\n                    A.SDU_COD < 30)                                                         AND\n                    A.CLI_COD BETWEEN ${data.cliIni} AND ${\n      data.cliFin\n    }        AND\n                    A.DUP_DATA_PAGTO    IS NULL                    AND\n                    A.DUP_DATA_CANC IS NULL                         AND\n          A.VEN_COD BETWEEN 1 AND 999999  AND\n          A.DUP_DATA_PRORROGA BETWEEN TO_DATE('${dayjs(data.dataIni).format(\n            'DD/MM/YYYY',\n          )}', 'DD/MM/YYYY') AND TO_DATE('${dayjs(data.dataFini).format(\n      'DD/MM/YYYY',\n    )}', 'DD/MM/YYYY') and\n          A.DUP_SEQ BETWEEN TO_NUMBER(1) AND TO_NUMBER(9999) AND\n          (A.ESB_COD        =  B.ESB_COD)                     AND\n          (A.CLI_COD        =  C.CLI_COD)                     AND\n          (C.VEN_COD        =  D.VEN_COD)\n      ORDER  BY C.CLI_RAZAO_SOC, A.DUP_NUMER, A.DUP_SEQ\n    `;\n\n    const result = await conn.execute(query);\n\n    if (conn) await conn.close();\n\n    return result.rows;\n  }\n\n  public async duplicatasAtraso(data: DuplicatasAtraso) {\n    const conn = await connection();\n\n    const query = `\n\n    SELECT TO_CHAR(SYSDATE, 'DD/MM/YYYY')     DATA_SISTEMA,\n    TO_CHAR(SYSDATE, 'HH:MI')                         HORA_SISTEMA,\n    A.ESB_COD                                                 ESTAB_COD,\n    B.ESB_DESC                                                ESTAB_NOME,\n    A.CLI_COD                                                 CLI_COD,\n    C.CLI_RAZAO_SOC,\n    A.CLI_COD|| ' - ' || SUBSTR(C.CLI_RAZAO_SOC,1,19)              CLI_NOME,\n    C.CLI_FONE                                                TELEFONE,\n    C.CLI_CGC_C                                               CNPJ_C,\n    SUBSTR(D.VEN_NOME,1,20)                                  VENDEDOR,\n    A.DUP_NUMER||'/'||DUP_SEQ                                 DUPLIC,\n    A.DUP_DATA_PRORROGA                                       DT_VENC,\n    (A.DUP_VALOR_CR$ + A.DUP_VALOR_JUROS_CR$) - (A.DUP_VALOR_ABATI_CR$ + A.DUP_VALOR_DESC_CR$ + A.DUP_VALOR_PAGTO_CR$)    VALOR_CR$,\n    A.DUP_VALOR_ABATI_CR$                                VALOR_ABATI_CR$,\n    A.DUP_VALOR_DESC_CR$                                VALOR_DESC_CR$,\n    A.DUP_VALOR_JUROS_CR$                              VALOR_JUROS_CR$,\n    TRUNC(SYSDATE) - DUP_DATA_PRORROGA        ATRASO,\n    A.DUP_NUMER_BANCO                         BANCO\nFROM   SINDUPLIC A, SINESTAB B, SINCLIENTES C, SINVENDEDOR D, SINMOVVEN E\nWHERE  (A.ESB_COD = ${data.estab} AND\n     A.SDU_COD < 30                 AND\n     E.VEN_COD BETWEEN 1 AND 999999 AND\n     A.DUP_DATA_PRORROGA BETWEEN TO_DATE('${dayjs(data.dataIni).format(\n       'DD/MM/YYYY',\n     )}', 'DD/MM/YYYY') AND TO_DATE('${dayjs(data.dataFini).format(\n      'DD/MM/YYYY',\n    )}', 'DD/MM/YYYY') AND\n     A.DUP_DATA_PRORROGA  < TRUNC(SYSDATE) AND\n     A.CLI_COD BETWEEN ${data.cliIni}  AND ${data.cliFin}   AND\n     A.DUP_SEQ BETWEEN 1  AND 99999) AND\n    (A.ESB_COD        =  B.ESB_COD) AND\n    (A.CLI_COD        =  C.CLI_COD) AND\n    (C.VEN_COD        =  D.VEN_COD AND\n     A.ESB_COD = E.ESB_COD AND A.MVE_SERIE_DOC = E.MVE_SERIE_DOC AND A.MVE_NUMER_DOC = E.MVE_NUMER_DOC)\nORDER  BY C.CLI_RAZAO_SOC, A.DUP_NUMER, A.DUP_SEQ\n\n    `;\n\n    const result = await conn.execute(query);\n\n    if (conn) await conn.close();\n\n    return result.rows;\n  }\n}\n","import FinanceModel from '@models/Finances';\r\nimport { DuplicatasAberto } from 'src/types';\r\n\r\nconst dataFinances = new FinanceModel();\r\n\r\nexport default class DataLoadingController {\r\n  public async getDuplicatasAberto(data: DuplicatasAberto) {\r\n    const dataFormatted = {\r\n      estab: data.estab,\r\n      cliIni: data.cliIni || 1,\r\n      cliFin: data.cliFin || 999999,\r\n      dataIni: data.dataIni || new Date(),\r\n      dataFini: data.dataFini || new Date(),\r\n    };\r\n\r\n    return dataFinances.duplicasAberto(dataFormatted);\r\n  }\r\n\r\n  public async getDuplicataAtraso(data: DuplicatasAberto) {\r\n    const dataFormatted = {\r\n      estab: data.estab,\r\n      cliIni: data.cliIni || 1,\r\n      cliFin: data.cliFin || 999999,\r\n      dataIni: data.dataIni || new Date(),\r\n      dataFini: data.dataFini || new Date(),\r\n    };\r\n\r\n    return dataFinances.duplicatasAtraso(dataFormatted);\r\n  }\r\n}\r\n"],"mappings":"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","names":["import_express","import_express","oracledb","md5","jwt","import_express","import_jsonwebtoken","import_express","sessionController","import_express","sqlite","import_express","dayjs","DataLoadingController","DataLoadingController","express","cors","CookieParser"]}